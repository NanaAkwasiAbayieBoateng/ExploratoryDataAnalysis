head(diamonds.samp)
p_ <- GGally::print_if_interactive
# use sample of the diamonds data for illustrative purposes
data(diamonds, package="ggplot2")
diamonds.samp <- diamonds[sample(1:dim(diamonds)[1], 100), ]
# basic parallel coordinate plot, using default settings
p <- ggparcoord(data = diamonds.samp, columns = c(1, 5:10))
p_(p)
# this time, color by diamond cut
p <- ggparcoord(data = diamonds.samp, columns = c(1, 5:10), groupColumn = 2)
p_(p)
p_(p)
?ggparcoord
diamonds.samp
head(diamonds.samp)
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# use sample of the diamonds data for illustrative purposes
data(diamonds, package="ggplot2")
diamonds.samp <- diamonds[sample(1:dim(diamonds)[1], 100), ]
# basic parallel coordinate plot, using default settings
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10))
p_(p)
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = 1)
p_(p)
p
# basic parallel coordinate plot, using default settings
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10))
p_(p)
p
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = 1)
p_(p)
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = 1)
p_(p)
p
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = 1)
p_(p)
?ggparcoord
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# use sample of the diamonds data for illustrative purposes
data(diamonds, package="ggplot2")
diamonds.samp <- diamonds[sample(1:dim(diamonds)[1], 100), ]
# basic parallel coordinate plot, using default settings
p <- ggparcoord(data = diamonds.samp, columns = c(1, 5:10))
p_(p)
# this time, color by diamond cut
p <- ggparcoord(data = diamonds.samp, columns = c(1, 5:10), groupColumn = 2)
p_(p)
# underlay univariate boxplots, add title, use uniminmax scaling
p <- ggparcoord(data = diamonds.samp, columns = c(1, 5:10), groupColumn = 2,
scale = "uniminmax", boxplot = TRUE, title = "Parallel Coord. Plot of Diamonds Data")
p_(p)
?ggparcoord
#install.packages("ggpubr")
library(pacman)
pacman::p_load(tidyverse,janitor,DataExplorer,skimr,ggpubr,viridis)
theme_set(theme_pubclean())
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = 1, title = "Parallel Coord. Plot of Diamonds Data",scale = "uniminmax", boxplot = TRUE)+
scale_fill_viridis(discrete = T)
p_(p)
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = 1, title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1))+
scale_fill_viridis(discrete = T)
p_(p)
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = 1, title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1))+
scale_fill_viridis(discrete = T)+
ggplot2::scale_size_identity()
p_(p)
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = 1, title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1))+
scale_fill_viridis(discrete = T)+
ggplot2::scale_size_identity()
p_(p)
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = 1, title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1))+
#scale_fill_viridis(discrete = T)+
scale_fill_manual(values=c("#B9DE28FF" , "#D1E11CFF" ))+
ggplot2::scale_size_identity()
p_(p)
# color according to a column
iris2 <- iris
iris2$alphaLevel <- c("setosa" = 0.2, "versicolor" = 0.3, "virginica" = 0)[iris2$Species]
p <- ggparcoord(data = iris2, columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE, title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = "alphaLevel")
p_(p)
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = "Purchase", title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1),showPoints = TRUE)+
#scale_fill_viridis(discrete = T)+
scale_fill_manual(values=c("#B9DE28FF" , "#D1E11CFF" ))+
ggplot2::scale_size_identity()
p_(p)
#na.omit(orangejuice)%>%select_if(is.double)%>%
# na.omit(orangejuice)%>%
#mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
# small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = "Purchase", title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1),showPoints = TRUE)+
#scale_fill_viridis(discrete = T)+
scale_fill_manual(values=c("#B9DE28FF" , "#D1E11CFF" ))+
ggplot2::scale_size_identity()
p_(p)
p_(p)
?ggparcoord
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = "Purchase", title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1),showPoints = TRUE,alpha = .05,)+
#scale_fill_viridis(discrete = T)+
scale_fill_manual(values=c("#B9DE28FF" , "#D1E11CFF" ))+
ggplot2::scale_size_identity()
p_(p)
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = "Purchase", title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1),showPoints = TRUE,alpha = .05,)+
#scale_fill_viridis(discrete = T)+
scale_fill_manual(values=c("#B9DE28FF" , "#D1E11CFF" ))+
ggplot2::scale_size_identity()
p_(p)
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = "Purchase", title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1),showPoints = TRUE,alpha = .05,)+
#scale_fill_viridis(discrete = T)+
scale_fill_manual(values=c("#B9DE28FF" , "#D1E11CFF" ))+
ggplot2::scale_size_identity()
p_(p)
?ggparcoord
#M <- cor(iris_numeric)
#corrplot.mixed(M,upper = "color", tl.col = "black")
#orangejuice[!is.na(orangejuice),]
pacman::p_load(plotly,corrr,RColorBrewer,corrplot)
na.omit(orangejuice)%>%select_if(is.numeric)%>%cor()%>%
corrplot.mixed(upper = "color", tl.col = "black")
na.omit(orangejuice)%>%select_if(is.numeric)%>%cor()%>%corrplot::corrplot()
na.omit(orangejuice)%>%
dplyr::select(Sale_Price, contains("sf")) %>%
map_df(scale) %>%
ggpairs()
head(orangejuice)
na.omit(orangejuice)%>%
dplyr::select(contains("CH"))
?contains
na.omit(orangejuice)%>%
dplyr::select(contains("CH" , "MM")) %>%
map_df(scale) %>%
ggpairs()
head(orangejuice)
na.omit(orangejuice)%>%
dplyr::select(matches("CH" | "MM"))%>%
map_df(scale) %>%
ggpairs()
na.omit(orangejuice)%>%
dplyr::select(matches("CH" | "MM"))
na.omit(orangejuice)%>%
#dplyr::select(matches("CH" | "MM"))%>%
orangejuice[grepl('MM|CH', names(orangejuice))]
orangejuice[grepl('MM|CH', names(orangejuice))]
str(orangejuice)
orange2<-orangejuice%>%select(SalePriceMM,SalePriceCH,PctDiscMM,PctDiscCH,Purchase)
?gather
orange2%>%gather(-Purchase)
head(orange2)
# get first observation for each Species in iris data -- base R
mini_iris <- iris[c(1, 51, 101), ]
# gather Sepal.Length, Sepal.Width, Petal.Length, Petal.Width
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
orange2<-orangejuice%>%select(SalePriceMM,SalePriceCH,Purchase)
orange2%>%gather(key = Brand, value = Sale,-Purchase)%>%head()
orange2<-orangejuice%>%select(SalePriceMM,SalePriceCH,Purchase)%>%
gather(key = Brand, value = Sale,-Purchase)
orange3<-orangejuice%>%select(PctDiscMM, PctDiscCH,Purchase)%>%
gather(key = Brand, value = Discount,-Purchase)
head(orange3)
orange2<-orangejuice%>%select(SalePriceMM,SalePriceCH,Purchase)%>%
gather(key = Brand, value = Sale,-Purchase)
orange3<-orangejuice%>%select(PctDiscMM, PctDiscCH,Purchase)%>%
gather(key = Brand, value = Discount,-Purchase)
orange4<-inner_join(orange2,orange3,by=Purchase)
head(orange2)
head(orange3)
orange2<-orangejuice%>%select(SalePriceMM,SalePriceCH,Purchase)%>%
gather(key = Brand, value = Sale,-Purchase)
orange3<-orangejuice%>%select(PctDiscMM, PctDiscCH,Purchase)%>%
gather(key = Brand, value = Discount,-Purchase)
orange4<-inner_join(orange2,orange3,by= Purchase)
orange2<-orangejuice%>%select(SalePriceMM,SalePriceCH,Purchase)%>%
gather(key = Brand, value = Sale,-Purchase)
orange3<-orangejuice%>%select(PctDiscMM, PctDiscCH,Purchase)%>%
gather(key = Brand, value = Discount,-Purchase)
orange4<-dplyr::inner_join(orange2,orange3,by= Purchase)
orange2<-orangejuice%>%select(SalePriceMM,SalePriceCH,Purchase)%>%
gather(key = Brand, value = Sale,-Purchase)
orange3<-orangejuice%>%select(PctDiscMM, PctDiscCH,Purchase)%>%
gather(key = Brand, value = Discount,-Purchase)
orange4<-dplyr::inner_join(orange2,orange3,by= "Purchase")
head(orange4)
orange2<-orangejuice%>%select(SalePriceMM,SalePriceCH,Purchase)%>%
gather(key = Brand, value = Sale,-Purchase)
orange3<-orangejuice%>%select(PctDiscMM, PctDiscCH,Purchase)%>%
gather(key = Brand, value = Discount,-Purchase)
orange4<-dplyr::inner_join(orange2,orange3,by= "Purchase")
head(orange3)
orange2<-orangejuice%>%select(SalePriceMM,SalePriceCH,Purchase)%>%
gather(key = Brand, value = Sale,-Purchase)
orange3<-orangejuice%>%select(PctDiscMM, PctDiscCH,Purchase)%>%
gather(key = Brand, value = Discount,-Purchase)
orange4<-dplyr::inner_join(orange2,orange3,by= "Purchase")
head(orange3)
head(orange2)
orange2<-orangejuice%>%select(SalePriceMM,SalePriceCH,Purchase)%>%
gather(key = Brand_Discount, value = Sale,-Purchase)
orange3<-orangejuice%>%select(PctDiscMM, PctDiscCH,Purchase)%>%
gather(key = Brand_Sale, value = Discount,-Purchase)
orange4<-dplyr::inner_join(orange2,orange3,by= "Purchase")
head(orange3)
head(orange4)
ggplot(orange4, aes(x = Discount, y = Sale, color = Purchase, shape = Sale)) +
geom_point(alpha = .3) +
geom_density2d(alpha = .5) +
geom_smooth(method = "lm", se = FALSE) +
scale_x_log10() +
scale_y_log10(labels = scales::dollar) +
#facet_wrap(~ House_Style, nrow = 2) +
ggtitle(" Percentage Discount versus Sale Price ",
subtitle = "") +
theme_bw()
ggplot(orange4, aes(x = Discount, y = Sale, color = Purchase, shape = Purchase)) +
geom_point(alpha = .3) +
geom_density2d(alpha = .5) +
geom_smooth(method = "lm", se = FALSE) +
scale_x_log10() +
scale_y_log10(labels = scales::dollar) +
#facet_wrap(~ House_Style, nrow = 2) +
ggtitle(" Percentage Discount versus Sale Price ",
subtitle = "") +
theme_bw()
ggplot(orange4, aes(x = Discount, y = Sale, color = Purchase)) +
geom_point(alpha = .3) +
geom_density2d(alpha = .5) +
geom_smooth(method = "lm", se = FALSE) +
scale_x_log10() +
scale_y_log10(labels = scales::dollar) +
#facet_wrap(~ House_Style, nrow = 2) +
ggtitle(" Percentage Discount versus Sale Price ",
subtitle = "") +
theme_bw()
ggplot(orange4, aes(x = Discount, y = Sale, color = Purchase)) +
geom_point(alpha = .3) +
geom_density2d(alpha = .5) +
geom_smooth(method = "lm", se = FALSE) +
#scale_x_log10() +
#scale_y_log10(labels = scales::dollar) +
#facet_wrap(~ House_Style, nrow = 2) +
ggtitle(" Percentage Discount versus Sale Price ",
subtitle = "")
ggplot(orange4, aes(x = Discount, y = Sale, color = Purchase)) +
geom_point(alpha = .3) +
# geom_density2d(alpha = .5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(" Percentage Discount versus Sale Price ",
subtitle = "")
?scales::percent
?heatmap
require(graphics); require(grDevices)
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
?heatmap
## no column dendrogram (nor reordering) at all:
heatmap(x, Colv = NA, col = cm.colors(256), scale = "column",
RowSideColors = rc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
?heatmap
## "no nothing"
heatmap(x, Rowv = NA, Colv = NA, scale = "column",
main = "heatmap(*, NA, NA) ~= image(t(x))")
na.omit(orangejuice)%>%
select_if(is.numeric) %>%
cor() %>%
heatmap(Rowv = NA, Colv = NA, scale = "column")
na.omit(orangejuice)%>%
select_if(is.numeric) %>%
cor() %>%
heatmap(Rowv = NA, Colv = NA, scale = "column")
?heatmap
round(Ca <- cor(attitude), 2)
symnum(Ca) # simple graphic
heatmap(Ca,               symm = TRUE, margins = c(6,6)) # with reorder()
heatmap(Ca, Rowv = FALSE, symm = TRUE, margins = c(6,6)) # _NO_ reorder()
## slightly artificial with color bar, without and with ordering:
cc <- rainbow(nrow(Ca))
?heatmap
round(Ca <- cor(attitude), 2)
symnum(Ca) # simple graphic
heatmap(Ca,               symm = TRUE, margins = c(6,6)) # with reorder()
heatmap(Ca, Rowv = FALSE, symm = TRUE, margins = c(6,6)) # _NO_ reorder()
## slightly artificial with color bar, without and with ordering:
cc <- rainbow(nrow(Ca))
heatmap(Ca, Rowv = FALSE, symm = TRUE, RowSideColors = cc, ColSideColors = cc,
margins = c(6,6))
heatmap(Ca,		symm = TRUE, RowSideColors = cc, ColSideColors = cc,
margins = c(6,6))
?heatmap
## For variable clustering, rather use distance based on cor():
symnum( cU <- cor(USJudgeRatings) )
hU <- heatmap(cU, Rowv = FALSE, symm = TRUE, col = topo.colors(16),
distfun = function(c) as.dist(1 - c), keep.dendro = TRUE)
## The Correlation matrix with same reordering:
round(100 * cU[hU[[1]], hU[[2]]])
## The column dendrogram:
utils::str(hU$Colv)
str(orangejuice)
na.omit(orangejuice)%>%select_if(is.double)%>%
mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
GGally::ggparcoord(showPoints = TRUE,
alpha = .05,
scale = "center",
columns = 1:8,
groupColumn = "Above_Avg"
)
na.omit(orangejuice)%>%select_if(is.double)%>%
mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
GGally::ggparcoord(showPoints = TRUE,
alpha = .05,
scale = "center",
columns = 1:8,
groupColumn = "Above_Avg"
)
ggparcoord(data = na.omit(orangejuice), columns = c(2:10),title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1),showPoints = TRUE,alpha = .05,)
ggparcoord(data = na.omit(orangejuice), columns = c(2:10),title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, showPoints = TRUE)
ggplot(orange4, aes(x = Discount, y = Sale, color = Purchase)) +
geom_point(alpha = .3) +
# geom_density2d(alpha = .5) +
geom_smooth(method = "gam", se = FALSE) +
ggtitle(" Percentage Discount versus Sale Price ",
subtitle = "")+
scale_x_continuous(labels = scales::percent)
ggplot(orange4, aes(x = Discount, y = Sale, color = Purchase)) +
geom_point(alpha = .3) +
# geom_density2d(alpha = .5) +
geom_smooth(method = "gam", se = FALSE) +
ggtitle(" Percentage Discount versus Sale Price ",
subtitle = "") +
scale_x_continuous(labels = scales::percent)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
out.width ="100%",
message = FALSE,
fig.align = 'default',
warning = FALSE,
fig.cap ="Fig. 30",
out.width="100%")
options(repr.plot.height = 7, repr.plot.width = 7)
options(tidyverse.quiet = TRUE)
options(dplyr.print_max = 1e9)
#knitr::opts_knit$set(root.dir = normalizePath(".."))
#knitr::read_chunk("example.R")
#install.packages("ggpubr")
library(pacman)
pacman::p_load(tidyverse,janitor,DataExplorer,skimr,ggpubr,viridis)
theme_set(theme_pubclean())
# Import dataset
orangejuice<-read_csv('https://raw.githubusercontent.com/NanaAkwasiAbayieBoateng/ExploratoryDataAnalysis/master/orangejuice.csv')
write_csv(orangejuice,"orangejuice.csv")
orangejuice%>%head()
plot_str(orangejuice)
plot_missing(orangejuice)
pacman::p_load(extracat)
extracat::visna(orangejuice, sort = "b", sort.method="optile", fr=100, pmax=0.05, s = 2)
plot_histogram(orangejuice)
plot_density(orangejuice)
plot_bar(orangejuice)
pacman::p_load(GGally)
na.omit(orangejuice)%>%select_if(is.double)%>%ggpairs(  title = "Continuous Variables")
p_ <- GGally::print_if_interactive
# this time, color by diamond cut
p <- ggparcoord(data = na.omit(orangejuice), columns = c(2:10), groupColumn = "Purchase", title = "Parallel Coord. Plot of Orange Juice Data",scale = "uniminmax", boxplot = FALSE, mapping = ggplot2::aes(size = 1),showPoints = TRUE,alpha = .05,)+
#scale_fill_viridis(discrete = T)+
scale_fill_manual(values=c("#B9DE28FF" , "#D1E11CFF" ))+
ggplot2::scale_size_identity()
p_(p)
na.omit(orangejuice)%>%select_if(is.double)%>%
mutate(Above_Avg = PriceCH > mean(PriceCH)) %>%
GGally::ggparcoord(showPoints = TRUE,
alpha = .05,
scale = "center",
columns = 1:8,
groupColumn = "Above_Avg"
)
plot_correlation(na.omit(orangejuice),type = "continuous",theme_config = list(legend.position = "bottom", axis.text.x =
element_text(angle = 90)))
pacman::p_load(plotly,corrr,RColorBrewer,corrplot)
na.omit(orangejuice)%>%select_if(is.numeric)%>%cor()%>%corrplot::corrplot()
#Equivalently
#na.omit(orangejuice)%>%select_if(is.numeric)%>%cor()%>%
#  corrplot.mixed(upper = "color", tl.col = "black")
na.omit(orangejuice)%>%
select_if(is.numeric) %>%
cor() %>%
heatmap(Rowv = NA, Colv = NA, scale = "column")
pacman::p_load(d3heatmap)
na.omit(orangejuice)%>%
select_if(is.numeric) %>%
cor() %>%
d3heatmap(colors = "Blues", scale = "col",
dendrogram = "row", k_row = 3)
library(devtools)
#install_github("easyGgplot2", "kassambara")
pacman::p_load(ggalt,gridExtra,scales,kassambara,easyGgplot2)
p1<-ggplot(orangejuice, aes(x=SalePriceCH, fill=Purchase)) + geom_bkde(alpha=0.5)
p2<-ggplot(orangejuice, aes(x=SalePriceMM, fill=Purchase)) + geom_bkde(alpha=0.5)
# Multiple graphs on the same page
easyGgplot2::ggplot2.multiplot(p1,p2, cols=2)
skimr::skim(orangejuice)%>%kable()
skimmed <-skim_to_wide(orangejuice)
skimmed
mlr::summarizeColumns(orangejuice)
(spec_variables <- attr(orangejuice, "spec"))
spec_variables<-c("LoyalCH", "SalePriceMM","SalePriceCH" ,"PctDiscMM","PctDiscCH","ListPriceDiff","Purchase","Store7")
spec_variable<-noquote(spec_variables)
pm<-ggpairs(orangejuice,spec_variable , title = "",mapping = aes(color = Purchase))+
theme(legend.position = "top")
pm
pm[1,7]
na.omit(orangejuice)%>% select_if(~!is.double(.x))%>%
ggpairs( mapping = aes(color = Purchase) , title = "Categorical Variables")+
theme(legend.position = "top")
#Equivalently
#na.omit(orangejuice)%>% select_if(funs(!is.double(.)))%>%
# ggpairs(  title = "Categorical Variables")
#index=!sapply(na.omit(orangejuice), is.double)
#orange_numeric<-orangejuice[index==TRUE]
#orange_numeric%>%ggpairs(  title = "Categorical Variables")
#na.omit(orangejuice)%>%select_if(negate(is.double))%>%
#  ggpairs(  title = "Categorical Variables")
categorical_orange=na.omit(orangejuice)%>% select_if(~!is.double(.x))
continuous_orange=na.omit(orangejuice)%>% select_if(is.double)
categorical_orange<-noquote(names(categorical_orange))
continuous_orange<-noquote(names(continuous_orange))
ggduo(
orangejuice, rev(continuous_orange), categorical_orange,
mapping = aes(color = Purchase),
types = list(continuous = wrap("smooth_loess", alpha = 0.25)),
showStrips = FALSE,
title = "Variable Comparison By Purchase",
xlab = "Continuous Variables",
ylab = "Categorical",
legend = c(5,2)
) +
theme(legend.position = "top")
getwd()
